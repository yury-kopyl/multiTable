(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var CONST = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColResize = function ColResize(_ColResize2) {
	return function (_ColResize) {
		_inherits(_class, _ColResize);

		function _class($table, options) {
			_classCallCheck(this, _class);

			var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, $table, options));

			_this.$resize = undefined;
			_this.$resizeHandles = undefined;
			_this.operation = {};
			_this.$ownerDocument = $($table[0].ownerDocument);
			return _this;
		}

		_createClass(_class, [{
			key: 'initResize',
			value: function initResize() {
				this.createResize();
				this.wrapResize();
				this.onPointerHover();
				this.onPointerLeave();
				this.onPointerDown();
				this.onWindowResize();
			}
		}, {
			key: 'createResize',
			value: function createResize() {
				var _this2 = this;

				if (this.options.floatHead) {
					this.$floatWrap.css('width', this.ui.tableWidth + 'px');
				}

				this.$table.before('<div class="' + CONST.CLASS_RESIZE_TABLE + '"' + (this.options.colResize.isFixed ? ' style="width:' + this.ui.tableWidth + 'px"' : '') + '/>');
				this.$resize = this.$table.siblings('.' + CONST.CLASS_RESIZE_TABLE);

				this.$tableHeads.each(function (i, item) {
					var $item = $(item);
					var left = item.offsetLeft + item.offsetWidth;
					var noresize = $item.attr('data-noresize');

					if (_this2.options.colResize.isFixed || !_this2.options.colResize.isFixed && i !== _this2.$tableHeads.length - 1) {
						_this2.$resize.append('<div class="' + CONST.CLASS_RESIZE_HANDLE + '" style="left:' + left + 'px;"' + (noresize === '' ? ' ' + CONST.DATA_NORESIZE : '') + '/>');
					}
				});

				this.$resizeHandles = this.$resize.find('.' + CONST.CLASS_RESIZE_HANDLE);
			}
		}, {
			key: 'wrapResize',
			value: function wrapResize() {
				this.$resize.wrap('<div class="' + CONST.CLASS_RESIZE + '"/>');

				this.$resizeWrap = this.$resize.parent('.' + CONST.CLASS_RESIZE);
			}
		}, {
			key: 'onPointerHover',
			value: function onPointerHover() {
				this.$resizeHandles.on('mouseenter', function (event) {
					var $currentGrip = $(event.currentTarget);

					if ($currentGrip.is('.hover')) {
						return;
					}

					var timeout = setTimeout(function () {
						if ($currentGrip.is(':hover')) {
							$currentGrip.addClass('hover');
						}

						clearTimeout(timeout);
					}, 300);
				});
			}
		}, {
			key: 'onPointerLeave',
			value: function onPointerLeave() {
				this.$resizeHandles.on('mouseleave', function (event) {
					var $currentGrip = $(event.currentTarget);

					if (!$currentGrip.is('.hover')) {
						return;
					}

					$currentGrip.removeClass('hover');
				});
			}
		}, {
			key: 'onPointerDown',
			value: function onPointerDown() {
				var _this3 = this;

				this.$resizeHandles.on('mousedown touchstart', function (event) {
					// Only applies to left-click dragging
					if (event.which !== 1 || $(event.currentTarget).is('[data-noresize]')) {
						return;
					}

					_this3.$wrap.addClass(CONST.CLASS_WRAP_RESIZING);

					var $currentHandle = $(event.currentTarget);
					var currentIndex = $currentHandle.index();

					_this3.operation = {
						$currentHandle: $currentHandle,
						currentStartLeft: parseInt($currentHandle.css('left')),
						$currentColumn: _this3.$tableHeads.eq(currentIndex),
						currentIndex: currentIndex,
						$nextColumn: _this3.$tableHeads.eq(currentIndex + 1),
						nextIndex: currentIndex + 1,
						startX: _this3.getPointerX(event)
					};

					console.log(_this3.operation);

					_this3.onPointerMove();
					_this3.onPointerUp();
				});
			}
		}, {
			key: 'onPointerMove',
			value: function onPointerMove() {
				var _this4 = this;

				this.$ownerDocument.on('mousemove touchmove', function (event) {
					if (!_this4.operation) {
						return;
					}

					var difference = _this4.getPointerX(event) - _this4.operation.startX;
					if (difference === 0) {
						return;
					}

					if (_this4.operation.$currentColumn.attr('data-width') && difference < _this4.operation.$currentColumn.attr('data-width') - _this4.operation.$currentColumn.outerWidth() && difference < 0 || _this4.operation.$nextColumn.attr('data-width') && difference > _this4.operation.$nextColumn.outerWidth() - _this4.operation.$nextColumn.attr('data-width') && difference > 0 || !_this4.operation.$currentColumn.attr('data-width') && difference < _this4.options.colResize.minWidth - _this4.operation.$currentColumn.outerWidth() && difference < 0 || !_this4.operation.$nextColumn.attr('data-width') && difference > _this4.operation.$nextColumn.outerWidth() - _this4.options.colResize.minWidth && difference > 0) {
						return;
					}

					_this4.operation.diffrence = difference;
					var left = _this4.operation.currentStartLeft + difference;
					_this4.operation.$currentHandle.css('left', left + 'px');
				});
			}
		}, {
			key: 'onPointerUp',
			value: function onPointerUp() {
				var _this5 = this;

				this.$ownerDocument.on('mouseup', function () {
					if (!_this5.operation) {
						return;
					}

					if (_this5.operation.diffrence) {
						console.log(_this5.operation.$currentColumn.outerWidth(), _this5.operation.$nextColumn.outerWidth(), _this5.operation.diffrence);
						/* Get new current and next col width */
						var curWidth = _this5.operation.$currentColumn.outerWidth() + _this5.operation.diffrence;
						var nextWidth = _this5.operation.$nextColumn.outerWidth() - _this5.operation.diffrence;

						/* Change current and next column width */
						_this5.operation.$currentColumn.css('width', curWidth + 'px');
						_this5.operation.$nextColumn.css('width', nextWidth + 'px');

						/* Change width on floatHead class */
						if (_this5.options.floatHead) {
							_this5.changeColWidth(_this5.operation.currentIndex, curWidth, nextWidth);
						}

						/* If last handler move behind table */
						if (_this5.options.colResize.isFixed && !_this5.operation.$nextColumn.length) {
							var newWidth = _this5.ui.tableWidth + _this5.operation.diffrence;

							_this5.$floatWrap.css('width', newWidth + 'px');
							_this5.$table.css('width', newWidth + 'px');
							_this5.$resize.css('width', newWidth + 'px');

							_this5.ui.tableWidth = newWidth;

							if (_this5.$table.is('[' + CONST.DATA_COLUMNS_ID + ']') && _this5.options.store) {
								_this5.options.store.set(_this5.ui.storePrefix + '_tableWidth', newWidth);
							}
						}

						/* Save width in store */
						if (_this5.$table.is('[' + CONST.DATA_COLUMNS_ID + ']') && _this5.options.store) {
							_this5.options.store.set(_this5.ui.storePrefix + _this5.$tableHeads.eq(_this5.operation.currentIndex).attr(CONST.DATA_COLUMN_ID), curWidth);
							if (_this5.operation.$nextColumn.length) {
								_this5.options.store.set(_this5.ui.storePrefix + _this5.$tableHeads.eq(_this5.operation.nextIndex).attr(CONST.DATA_COLUMN_ID), nextWidth);
							}
						}
					}

					/* Remove event listener after mouse up */
					_this5.$ownerDocument.off('mouseup touchend mousemove touchmove');
					_this5.operation = null;
					_this5.$wrap.removeClass(CONST.CLASS_WRAP_RESIZING);
				});
			}
		}, {
			key: 'onWindowResize',
			value: function onWindowResize() {
				var _this6 = this;

				if (!this.options.colResize.isFixed) {
					this.$window.on('resize', function () {
						var resizeWidth = _this6.$wrap.outerWidth();
						if (_this6.ui.resizeWidth !== resizeWidth) {
							console.log('Changed');
							_this6.$resizeWrap.remove();
							_this6.$floatWrap.remove();
							_this6.$tableCols.removeAttr('style');
							_this6.$table.removeAttr('style');
							_this6.options.store.clear();
							_this6.initHead();
							_this6.initResize();
							_this6.ui.resizeWidth = resizeWidth;
						}
					});
				}
			}
		}, {
			key: 'getPointerX',
			value: function getPointerX(event) {
				if (event.type.indexOf('touch') === 0) {
					return (event.originalEvent.touches[0] || event.originalEvent.changedTouches[0]).pageX;
				}
				return event.pageX;
			}
		}]);

		return _class;
	}(_ColResize2);
};

exports.default = ColResize;

},{"./constants":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DATA_API = exports.DATA_API = 'multiTable';

var DATA_COLUMNS_ID = exports.DATA_COLUMNS_ID = 'data-resizable-columns-id';
var DATA_COLUMN_ID = exports.DATA_COLUMN_ID = 'data-resizable-column-id';

var DATA_NORESIZE = exports.DATA_NORESIZE = 'data-noresize';
var DATA_WIDTH = exports.DATA_WIDTH = 'data-width';

var CLASS_WRAP = exports.CLASS_WRAP = 'mt';
var CLASS_WRAP_RESIZING = exports.CLASS_WRAP_RESIZING = 'mt_resizing';

var CLASS_TABLE_COL = exports.CLASS_TABLE_COL = 'mt-table__col';

var CLASS_FLOAT = exports.CLASS_FLOAT = 'mt-float';
var CLASS_FLOAT_TABLE = exports.CLASS_FLOAT_TABLE = 'mt-float__table';
var CLASS_FLOAT_COL = exports.CLASS_FLOAT_COL = 'mt-float__col';

var CLASS_RESIZE = exports.CLASS_RESIZE = 'mt-resize';
var CLASS_RESIZE_TABLE = exports.CLASS_RESIZE_TABLE = 'mt-resize__table';
var CLASS_RESIZE_HANDLE = exports.CLASS_RESIZE_HANDLE = 'mt-resize__handle';

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var CONST = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Table = function () {
	function Table($table, options) {
		_classCallCheck(this, Table);

		this.initConfig(options);
		Table.validateOptions(options);

		this.$window = $(window);
		this.$wrap = undefined;
		this.$table = $table;
		this.ui = {
			wrapWidth: 0,
			wrapHeight: 0,
			tableWidth: 0,
			resizeWidth: 0,
			storePrefix: this.$table.attr(CONST.DATA_COLUMNS_ID) + '_'
		};
		this.$tableHeads = this.$table.find('> thead:first').find('tr:last-child').find('th');

		this.init();
	}

	_createClass(Table, [{
		key: 'initConfig',
		value: function initConfig(options) {
			var newOption = {
				floatHead: $.extend({}, Table.defaults.floatHead, options.floatHead),
				colResize: $.extend({}, Table.defaults.colResize, options.colResize)
			};

			this.options = $.extend({}, Table.defaults, newOption);
		}
	}, {
		key: 'init',
		value: function init() {
			if (this.options.colResize.isFixed) {
				this.$table.addClass('multiTable_fixed');
			}

			this.wrapTable();
			this.restoreColumnWidths();
		}
	}, {
		key: 'wrapTable',
		value: function wrapTable() {
			/* Wrap table */
			this.$table.wrap('<div class="' + CONST.CLASS_WRAP + '"/>');

			this.$wrap = this.$table.parent('.' + CONST.CLASS_WRAP);
			this.ui.tableWidth = parseFloat(this.$table.css('width'));
			this.ui.wrapHeight = parseFloat(this.$wrap.css('height'));
			this.ui.wrapWidth = parseFloat(this.$wrap.css('width'));
			this.ui.resizeWidth = this.ui.wrapWidth;

			/* Set table width */
			// this.$table.css('width', this.options.colResize.isFixed ? this.ui.tableWidth + 'px' : this.ui.wrapWidth);
		}
	}, {
		key: 'restoreColumnWidths',
		value: function restoreColumnWidths() {
			var _this = this;

			/* Get storage */
			var store = {};
			this.options.store.forEach(function (key, value) {
				if (key.match(_this.ui.storePrefix)) {
					store[key] = value;
				}
			});

			/* If storage not empty and storage length heads !== table length heads OR changed type of fixed */
			if (Object.keys(store).length !== this.$tableHeads.length + 2 && this.options.store || this.options.colResize.isFixed !== this.options.store.get(this.$table.attr(CONST.DATA_COLUMNS_ID) + '__isFixed')) {
				this.options.store.forEach(function (key) {
					if (key.match(_this.ui.storePrefix)) {
						delete store[key];
					}
				});
			}

			/* If was save storage */
			if (Object.keys(store).length) {
				/* Get width of column from storage and set it */
				this.$tableHeads.each(function (i, item) {
					var $item = $(item);
					var width = _this.options.store.get(_this.ui.storePrefix + _this.$tableHeads.eq(i).attr(CONST.DATA_COLUMN_ID));

					$item.css('width', width);
				});

				/* Set table width from storage */
				var tableWidth = this.options.store.get(this.ui.storePrefix + '_tableWidth');
				this.$table.css('width', tableWidth + 'px');
				this.ui.tableWidth = tableWidth;
			} else {
				/* Else table init first time */
				var restWidth = this.ui.tableWidth;
				var newTableWidth = 0;
				var countNotFixedHeads = this.$tableHeads.length;

				this.$tableHeads.each(function (i, item) {
					var $item = $(item);

					if ($item.is('[' + CONST.DATA_WIDTH + ']')) {
						restWidth -= $item.attr(CONST.DATA_WIDTH);
						countNotFixedHeads--;
					}
				});

				this.$tableHeads.each(function (i, item) {
					var $item = $(item);
					var width = $item.is('[' + CONST.DATA_WIDTH + ']') ? $item.attr('data-width') + 'px' : _this.options.colResize.isFixed ? $item.css('width') : restWidth / countNotFixedHeads + 'px';

					$item.css('width', width);
					newTableWidth += parseFloat(width);

					if (_this.$table.is('[' + CONST.DATA_COLUMNS_ID + ']') && _this.options.store) {
						_this.options.store.set(_this.ui.storePrefix + _this.$tableHeads.eq(i).attr(CONST.DATA_COLUMN_ID), parseFloat(width));
					}
				});

				this.options.store.set(this.ui.storePrefix + '_tableWidth', this.ui.tableWidth);
				this.options.store.set(this.ui.storePrefix + '_isFixed', this.options.colResize.isFixed);
				this.$table.css('width', newTableWidth + 'px');
				this.ui.tableWidth = newTableWidth;
			}
		}
	}], [{
		key: 'validateOptions',
		value: function validateOptions(options) {
			for (var key in options) {
				if (options.hasOwnProperty(key) && !Table.defaults.hasOwnProperty(key)) {
					throw new Error('option "' + key + '" does not exist');
				}

				if (options.hasOwnProperty(key) && _typeof(options[key]) !== Table.typeDefaults[key]) {
					throw new Error('option "' + key + '" haven\'t correct type: expected => ' + _typeof(options[key]) + ', actual => ' + Table.typeDefaults[key]);
				}
			}
		}
	}]);

	return Table;
}();

exports.default = Table;
;

Table.defaults = {
	floatHead: true,
	colResize: {
		isFixed: true,
		minWidth: 50
	},
	store: window.store,
	string: 'test',
	object: {},
	number: 100,
	fn: function fn() {
		return true;
	}
};

Table.typeDefaults = {
	floatHead: 'object',
	colResize: 'object',
	string: 'string',
	object: 'object',
	number: 'number',
	fn: 'function'
};

},{"./constants":2}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var CONST = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FloatHead = function FloatHead(_FloatHead2) {
	return function (_FloatHead) {
		_inherits(_class, _FloatHead);

		function _class($table, options) {
			_classCallCheck(this, _class);

			var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, $table, options));

			_this.$float = undefined;
			_this.$floatWrap = undefined;
			return _this;
		}

		_createClass(_class, [{
			key: 'initHead',
			value: function initHead() {
				this.createFloat();
				this.wrapFloat();
				this.scrollFloatPage();
			}
		}, {
			key: 'createFloat',
			value: function createFloat() {
				/*let store = this.options.store.getAll();
    let storePrefix = `${this.$table.attr(CONST.DATA_COLUMNS_ID)}_`;*/

				this.$table.before('<table class="' + (CONST.CLASS_FLOAT_TABLE + (this.options.floatHead.tableClass ? ' ' + this.options.floatHead.tableClass : '')) + '"' + (this.options.colResize.isFixed ? ' style="width:' + this.ui.tableWidth + 'px;"' : '') + '/>');
				this.$float = this.$table.siblings('.' + CONST.CLASS_FLOAT_TABLE);
				/*this.$float.append(`<colgroup/>`);*/

				/*if ( Object.keys(store).length && this.options.store ) {
    	this.$tableHeads.each((i, item) => {
    		let $item = $(item);
    		let width = this.options.store.get( storePrefix + this.$tableHeads.eq(i).attr(CONST.DATA_COLUMN_ID) );
    				this.$float.find('colgroup').append(`<col class="${CONST.CLASS_FLOAT_COL}" style="width:${width}px;"/>`);
    	});
    } else {
    	this.$tableHeads.each((i, item) => {
    		let $item = $(item);
    		let itemWidth = !this.options.colResize.isFixed ? this.$wrap.outerWidth() / this.$tableHeads.length : $item.css('width');
    		let width = $item.is(`[${CONST.DATA_WIDTH}]`) ? `${$item.attr('data-width')}px` : `${itemWidth}px`;
    				this.$float.find('colgroup').append(`<col class="${CONST.CLASS_FLOAT_COL}" style="width:${width};"/>`);
    	});
    }*/
				this.$table.find('> thead').clone().appendTo(this.$float);

				this.$floatHeads = this.$float.find('> thead:first').find('tr:last-child').find('th');
			}
		}, {
			key: 'wrapFloat',
			value: function wrapFloat() {
				this.$float.wrap('<div class="' + CONST.CLASS_FLOAT + '"/>');

				this.$floatWrap = this.$float.parent('.' + CONST.CLASS_FLOAT);
			}
		}, {
			key: 'changeColWidth',
			value: function changeColWidth(index, currentWidth, nextWidth) {
				this.$floatHeads.eq(index).css('width', currentWidth);
				this.$floatHeads.eq(index + 1).css('width', nextWidth);
			}
		}, {
			key: 'scrollFloatPage',
			value: function scrollFloatPage() {
				var _this2 = this;

				this.$window.scroll(function () {
					if (_this2.$table.get(0).getBoundingClientRect().top < 0 && _this2.$table.get(0).getBoundingClientRect().top + _this2.ui.wrapHeight - _this2.$float.outerHeight() * 2 > 0) {
						_this2.$floatWrap.css('top', -_this2.$table.get(0).getBoundingClientRect().top + 'px');
					} else {
						_this2.$floatWrap.css('top', '0px');
					}
				});
			}
		}]);

		return _class;
	}(_FloatHead2);
};

exports.default = FloatHead;

},{"./constants":2}],5:[function(require,module,exports){
'use strict';

var _multiTable = require('./multiTable');

var _multiTable2 = _interopRequireDefault(_multiTable);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function ($) {
	if (!$) {
		throw new Error('$ is undefined');
	}
	$.fn.multiTable = function (optionsOrMethod) {
		for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			args[_key - 1] = arguments[_key];
		}

		return this.each(function () {
			var $table = $(this);

			var api = $table.data(_constants.DATA_API);

			if (!api) {
				api = new _multiTable2.default($table, optionsOrMethod);
				$table.data(_constants.DATA_API, api);
			} else if (typeof optionsOrMethod === 'string') {
				var _api;

				return (_api = api)[optionsOrMethod].apply(_api, args);
			}
		});
	};

	$.multiTable = _multiTable2.default;
})($);

},{"./constants":2,"./multiTable":6}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = require('./core');

var _core2 = _interopRequireDefault(_core);

var _floatHead = require('./floatHead');

var _floatHead2 = _interopRequireDefault(_floatHead);

var _colResize = require('./colResize');

var _colResize2 = _interopRequireDefault(_colResize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultiTable = function (_ColResize) {
	_inherits(MultiTable, _ColResize);

	function MultiTable($table, options) {
		_classCallCheck(this, MultiTable);

		var _this = _possibleConstructorReturn(this, (MultiTable.__proto__ || Object.getPrototypeOf(MultiTable)).call(this, $table, options));

		_this.play();
		return _this;
	}

	_createClass(MultiTable, [{
		key: 'play',
		value: function play() {
			if (this.options.floatHead) {
				this.initHead();
			}

			if (this.options.colResize) {
				this.initResize();
			}
		}
	}]);

	return MultiTable;
}((0, _colResize2.default)((0, _floatHead2.default)(_core2.default)));

exports.default = MultiTable;
;

},{"./colResize":1,"./core":3,"./floatHead":4}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
